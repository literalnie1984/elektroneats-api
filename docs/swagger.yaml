openapi: 3.0.0
components:
  schemas:
    RefreshTokenRequest:
      type: object
      properties:
        refreshToken:
          type: string
    TokenGenResponse:
      type: object
      properties:
        accessToken:
          type: string
        refreshToken:
          type: string
    OrderStatus:
      type: string
      enum:
        - Paid
        - Prepared
        - Ready
        - Collected
    ExtrasType:
      type: string
      enum:
        - Filler
        - Beverage
        - Salad
    DinnerType:
      type: string
      enum:
        - Soup
        - Main
    DinnerModel:
      type: object
      properties:
        id:
          type: integer
          format: int32
        name:
          type: string
        price:
          type: string
          example: "0.0"
        image:
          type: string
        weekDay:
          type: integer
          format: uint8
        maxSupply:
          type: integer
          format: int32
        type:
          $ref: "#/components/schemas/DinnerType"
      required:
          - id
          - image
          - maxSupply
          - name
          - price
          - type
          - weekDay
    ExtrasModel:
      type: object
      properties:
        id:
          type: integer
          format: int32
        name:
          type: string
        price:
          type: string
          example: "0.0"
        image:
          type: string
        type:
          $ref: "#/components/schemas/ExtrasType"
      required:
          - id
          - name
          - price
          - image
          - type
    DinnerResponse:
      type: object
      properties:
        dinnerId:
          type: integer
          format: int32
        extrasIds:
          type: array
          items:
            type: integer
            format: int32
    OrderResponse:
      type: object
      properties:
        orderId:
          type: integer
          format: int32
        collectionDate:
          type: integer
          format: int32
        status:
          $ref: "#/components/schemas/OrderStatus"
        dinners:
          type: array
          items:
              $ref: "#/components/schemas/DinnerResponse"
    UserOrders:
      type: object
      properties:
        response:
          type: array
          items:
            $ref: "#/components/schemas/OrderResponse"
        dinners:
          type: array
    OrderStatusRequest:
      type: object
      properties:
        newStatus:
          type: string
          enum:
            - Paid
            - Prepared
            - Ready
            - Collected
    MenuVec:
      type: object
      properties:
        response:
          type: array
          items:
            type: array
            items:
              type: object
              properties:
                "dinner":
                  $ref: "#/components/schemas/DinnerModel"
                "extrasIds":
                  type: array
                  items:
                    type: integer
                    format: int32
        extras:
          $ref: "#/components/schemas/ExtrasModel"
    MenuDay:
      type: object
      properties:
        "dinners":
          type: array
          items:
            $ref: "#/components/schemas/DinnerModel"
        "extras":
          type: array
          items:
            $ref: "#/components/schemas/ExtrasModel"
      required:
        - "dinners"
        - "extras"
    UserChangePassword:
      type: object
      properties:
        newPassword:
          type: string
        oldPassword:
          type: string
      required:
        - newPassword
        - oldPassword
    UserLogin:
      type: object
      properties:
        email:
          type: string
        password:
          type: string
      required:
        - email
        - password
    UserRegister:
      type: object
      properties:
        email:
          type: string
        password:
          type: string
        username:
          type: string
      required:
        - email
        - password
        - username
    CreateOrder:
      type: object
      properties:
        "collectionDate":
          type: integer
          example: 1680037035
          description: unix seconds
        "dinners":
          type: array
          items:
            type: object
            properties:
              dinnerId:
                type: integer
                example: 1
              extrasId:
                type: array
                items:
                  type: integer
                example: [1,2,3]
            required:
              - dinnerId
              - extrasId
      required:
        - dinners
        - collectionDate
    GetOrder:
      type: object
      properties:
        "collectionDate":
          type: integer
          example: 1680037035
          description: unix seconds
        "dinners":
          type: array
          items:
            $ref: "#/components/schemas/MenuDay"
    Weekday:
      type: string
      enum:
        - Monday
        - Tuesday
        - Wednesday
        - Thursday
        - Friday
        - Saturday
        - Sunday
    UpdateMenu:
      type: object
      properties:
        id:
          type: integer
          format: int32
        name:
          type: string
        price:
          type: number
          format: float
        image:
          type: string
        maxSupply:
          type: integer
          format: int32
        weekDay:
          $ref: '#/components/schemas/Weekday'
      required:
        - id
  securitySchemes:
    userAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: Marked requests must include Authorization header with JWT given during login
servers:
  - url: http://127.0.0.1:4765/api
    description: Dev server
paths:
  /menu/:
    get:
      summary: gets full menu array
      responses:
        "200":
          description: OK
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/MenuVec"
        "500":
          description: Internal Server Error
  "/menu/day/{day}":
    get:
      summary: gets menu array for given day
      responses:
        "200":
          description: OK
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/MenuDay"
        "500":
          description: Internal Server Error
      parameters:
        - in: path
          name: day
          required: true
          schema:
            type: integer
            format: int32
            pattern: "[0-9]"
  /menu/today:
    get:
      summary: gets full menu array for today
      responses:
        "200":
          description: OK
          content:
            "*/*":
              schema:
                 $ref: "#/components/schemas/MenuDay"
        "500":
          description: Internal Server Error
  /menu/update:
    get:
      summary: scrapes menu site and loads it into DB
      responses:
        "200":
          description: OK
          content:
            text/plain:
              schema:
                type: string
                example: Success message
        "500":
          description: Internal Server Error
  "/menu/{item_id}":
    get:
      summary: TODO
      responses:
        "418":
          description: TODO
      parameters:
        - in: path
          name: item_id
          required: true
          schema:
            type: integer
            format: int32
  "/menu/last-update":
    get:
      summary: return last menu update date
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  lastUpdate:
                    type: integer
                    description: "Date of last update in unix seconds"
        "500":
          description: Internal Server Error
  "/user/activate/{token}":
    post:
      summary: activates user account with token generated during register
      responses:
        "200":
          description: OK
          content:
            text/plain:
              schema:
                type: string
                example: Success message
        "400":
          description: Bad Request
        "500":
          description: Internal Server Error
      parameters:
        - in: path
          name: token
          required: true
          schema:
            type: string
  /user/password:
    put:
      summary: changes password for given logged-in user
      responses:
        "200":
          description: OK
          content:
            text/plain:
              schema:
                type: string
                example: Success message
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
      parameters:
        - in: header
          name: Authorization
          required: true
          description: Bearer <JWT Token>
          schema:
            type: string
            format: JWT
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserChangePassword"
        required: true
      security:
        - userAuth: []
  /user/delete:
    post:
      summary: Sends delete account email to given currently logged-in user
      security:
        - userAuth: []
      responses:
        "200":
          description: OK
          content:
            text/plain:
              schema:
                type: string
                example: Success message
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
      parameters:
        - in: header
          name: Authorization
          required: true
          description: Bearer <JWT Token>
          schema:
            type: string
            format: JWT
  "/user/delete/{token}":
    delete:
      summary: deletes account, token generated in /user/delete
      responses:
        "200":
          description: OK
          content:
            text/plain:
              schema:
                type: string
                example: Success message
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
      parameters:
        - in: path
          name: token
          required: true
          schema:
            type: string
  /user/refresh-token:
    post:
      summary: return new access token
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenGenResponse'
        "400":
          description: Bad Request
        "500":
          description: Internal Server Error
      requestBody:
        content:
            application/json:
              schema:
                $ref: '#/components/schemas/RefreshTokenRequest'
        required: true

  /user/data:
    get:
      summary: gets data about given user
      security:
        - userAuth: []
      responses:
        "200":
          description: OK
          content:
            text/plain:
              schema:
                type: object
                properties:
                  username:
                    type: string
                    example: Jan Jakub
                  admin:
                    type: boolean
                    example: false
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
      parameters:
        - in: header
          name: Authorization
          required: true
          description: Bearer <JWT Token>
          schema:
            type: string
            format: JWT
  /user/login:
    post:
      summary: tries to log-in given user
      responses:
        "200":
          description: OK
          content:
            text/plain:
              schema:
                type: string
                example: <JWT token>
        "400":
          description: Bad Request
        "500":
          description: Internal Server Error
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserLogin"
        required: true
  /user/register:
    post:
      summary: tries to register given user
      responses:
        "200":
          description: OK
          content:
            text/plain:
              schema:
                type: string
                example: Success message
        "400":
          description: Bad Request
        "500":
          description: Internal Server Error
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserRegister"
        required: true
  /user/orders/create:
    post:
      summary: creates a new order with given data
      responses:
        "200":
          description: Success msg
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
      parameters:
        - in: header
          name: Authorization
          required: true
          description: Bearer <JWT Token>
          schema:
            type: string
            format: JWT
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateOrder"
        required: true
  /user/orders/pending:
    get:
      summary: gets non realized user orders
      responses:
        "200":
          description: Success msg
          content:  
            application/json:
              schema: 
                $ref: "#/components/schemas/UserOrders"
        "401":
          description: Unauthorized
        "400":
          description: Bad Request
        "500":
          description: Internal Server Error
  /user/orders/completed:
    get:
      summary: gets realized user orders
      responses:
        "200":
          description: Success msg
          content:  
            application/json:
              schema: 
                $ref: "#/components/schemas/UserOrders"
        "401":
          description: Unauthorized
        "400":
          description: Bad Request
        "500":
          description: Internal Server Error
  /admin/dish:
    put:
      summary: updates given dish with given data
      responses:
        "200":
          description: Success msg
        "401":
          description: Unauthorized
        "400":
          description: Bad Request
        "500":
          description: Internal Server Error
      requestBody:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UpdateMenu"
      parameters:
          - in: header
            name: Authorization
            required: true
            description: User must be an admin
            schema:
              type: string
              format: JWT
  /admin/orders/{id}/status:
    put:
      summary: Updates order status with given id
      responses:
        "200":
          description: Success msg
        "401":
          description: Unauthorized
        "400":
          description: Bad Request
        "500":
          description: Internal Server Error
      requestBody:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OrderStatusRequest"
      parameters:
          - in: header
            name: Authorization
            required: true
            description: User must be an admin
            schema:
              type: string
              format: JWT
info:
  version: ""
  title: "Kantyna-app"
