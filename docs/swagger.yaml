openapi: 3.0.0
components:
  schemas:
    MenuVec:
      type: array
      items:
        type: array
        items:
          type: object
          properties:
            "dinner":
              $ref: "#/components/schemas/Dinners"
            "extras":
              type: array
              items:
                $ref: "#/components/schemas/Extras"
    MenuDay:
      type: object
      properties:
        "dinners":
          type: array
          items:
            $ref: "#/components/schemas/Dinners"
        "extras":
          type: array
          items:
            $ref: "#/components/schemas/Extras"
      required:
        - "dinners"
        - "extras"
    Extras:
      type: object
      properties:
        id:
          type: integer
          format: int32
        name:
          type: string
        price:
          type: number
          format: float
        image:
          type: string
        type:
          type: string
          enum:
            - Filler
            - Beverage
            - Salad
      required:
            - id
            - name
            - price
            - image
            - type
    Dinners:
      type: object
      properties:
        id:
          type: integer
          format: int32
        image:
          type: string
        maxSupply:
          type: integer
          format: int32
        name:
          type: string
        price:
          type: number
          format: float
        type:
          type: string
          enum:
            - Soup
            - Main
          weekDay:
              type: integer
              format: int32
      required:
          - id
          - image
          - maxSupply
          - name
          - price
          - type
          - weekDay
    UserChangePassword:
      type: object
      properties:
        newPassword:
          type: string
        oldPassword:
          type: string
      required:
        - newPassword
        - oldPassword
    UserLogin:
      type: object
      properties:
        email:
          type: string
        password:
          type: string
      required:
        - email
        - password
    UserRegister:
      type: object
      properties:
        email:
          type: string
        password:
          type: string
        username:
          type: string
      required:
        - email
        - password
        - username
  securitySchemes:
    userAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: Marked requests must include Authorization header with JWT given during login
servers:
  - url: http://127.0.0.1:4765/api
    description: Dev server
paths:
  /menu/:
    get:
      summary: gets full menu array
      responses:
        "200":
          description: OK
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/MenuVec"
        "500":
          description: Internal Server Error
  "/menu/day/{day}":
    get:
      summary: gets menu array for given day
      responses:
        "200":
          description: OK
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/MenuDay"
        "500":
          description: Internal Server Error
      parameters:
        - in: path
          name: day
          required: true
          schema:
            type: integer
            format: int32
            pattern: "[0-9]"
  /menu/today:
    get:
      summary: gets full menu array for today
      responses:
        "200":
          description: OK
          content:
            "*/*":
              schema:
                 $ref: "#/components/schemas/MenuDay"
        "500":
          description: Internal Server Error
  /menu/update:
    get:
      summary: scrapes menu site and loads it into DB
      responses:
        "200":
          description: OK
          content:
            text/plain:
              schema:
                type: string
                example: Success message
        "500":
          description: Internal Server Error
  "/menu/{item_id}":
    get:
      summary: TODO
      responses:
        "418":
          description: TODO
      parameters:
        - in: path
          name: item_id
          required: true
          schema:
            type: integer
            format: int32
  "/user/activate/{token}":
    get:
      summary: activates user account with token generated during register
      responses:
        "200":
          description: OK
          content:
            text/plain:
              schema:
                type: string
                example: Success message
        "400":
          description: Bad Request
        "500":
          description: Internal Server Error
      parameters:
        - in: path
          name: token
          required: true
          schema:
            type: string
  /user/change-password:
    post:
      summary: changes password for given logged-in user
      responses:
        "200":
          description: OK
          content:
            text/plain:
              schema:
                type: string
                example: Success message
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
      parameters:
        - in: header
          name: Authorization
          required: true
          description: Bearer <JWT Token>
          schema:
            type: string
            format: JWT
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserChangePassword"
        required: true
      security:
        - userAuth: []
  /user/delete:
    get:
      summary: Sends delete account email to given currently logged-in user
      security:
        - userAuth: []
      responses:
        "200":
          description: OK
          content:
            text/plain:
              schema:
                type: string
                example: Success message
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
      parameters:
        - in: header
          name: Authorization
          required: true
          description: Bearer <JWT Token>
          schema:
            type: string
            format: JWT
  "/user/delete/{token}":
    get:
      summary: deletes account, token generated in /user/delete
      responses:
        "200":
          description: OK
          content:
            text/plain:
              schema:
                type: string
                example: Success message
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
      parameters:
        - in: path
          name: token
          required: true
          schema:
            type: string
  /user/get-user-data:
    get:
      summary: gets data about given user
      security:
        - userAuth: []
      responses:
        "200":
          description: OK
          content:
            text/plain:
              schema:
                type: object
                properties:
                  username:
                    type: string
                    example: Jan Jakub
                  admin:
                    type: boolean
                    example: false
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
      parameters:
        - in: header
          name: Authorization
          required: true
          description: Bearer <JWT Token>
          schema:
            type: string
            format: JWT
  /user/login:
    post:
      summary: tries to log-in given user
      responses:
        "200":
          description: OK
          content:
            text/plain:
              schema:
                type: string
                example: <JWT token>
        "400":
          description: Bad Request
        "500":
          description: Internal Server Error
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserLogin"
        required: true
  /user/register:
    post:
      summary: tries to register given user
      responses:
        "200":
          description: OK
          content:
            text/plain:
              schema:
                type: string
                example: Success message
        "400":
          description: Bad Request
        "500":
          description: Internal Server Error
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserRegister"
        required: true
info:
  version: ""
  title: "Kantyna-app"

